[
  {
    "id": 1,
    "title": "Modern JavaScript",
    "master": [
      {
        "title": "Modern JavaScript for React - ES6 and beyond",
        "keywords": [
          "JavaScript(JS)",
          "es6 2015"
        ],
        "notes": [
          "React adalah sebuah library yang digunakan untuk membuat aplikasi dengan bahasa pemrograman JavaScript",
          "Standarisasi JavaScript sekarang memakai es6 2015"
        ],
        "summarize": "Untuk memulai belajar React diharuskan terlebih dahulu harus mengerti bahasa pemrograman JavaScript, selain itu juga di haruskan untuk memahami sintak-sintak es6 2015. Seperti let, const, template literal, arrow functions, class syntax, destructuring, default parameters, Rest operator, Spread operator, module dan promises. Karena dalam pembuatan aplikasi-aplikasi JavaScript, kita akan sering menggunakan sintaks-sintaks es6 kedepannya.",
        "usable_link": [
          {
            "url": "",
            "title": ""
          }
        ]
      },
      {
        "title": "Let and Const vs Var",
        "keywords": [
          "var",
          "let",
          "const",
          "scope"
        ],
        "notes": [
          "var adalah deklarasi variabel global.",
          "let hampir sama dengan var namun hanya mencakup pada block scope.",
          "const hanya bisa dipakai di dalam block scope dan bersifat constant tidak bisa dirubah.",
          "selain const, deklarasi variabel bisa dirubah."
        ],
        "summarize": "pada dasarnya deklarasi variabel di javascript hanya terbagi ke dalam 3 bagian var, let, dan const. sesuai dengan scope dan kegunaannya. rekomendasi untuk sekarang karena hampir semua browser telah support ES6 2015 maka untuk deklarasi variabel lebih direkomendasikan untuk memakai let daripada var. Alasannya sederhana karena var lebih global scope maka jika kita mendeklarasikan variabel dengan var di awal code dan jika code ini sudah jutaan dan kita deklarasikan dengan nama yang sama maka kode yang berada di awal tadi akan tertimpa. Sehingga menyebabkan kode tadi sudah tidak berfungsi lagi."
      },
      {
        "title": "Arrow Functions, Class syntax, Template literal",
        "keywords": [
          "arrow function",
          "class",
          "template literal"
        ],
        "notes": [
          "Arrow function merupakan penyederhanaan penulisan function di JavaScript",
          "Simbol arrow function adalah => "
        ],
        "summarize": ""
      },
      {
        "title": "Destructuring",
        "keywords": [
          "Destructuring"
        ],
        "notes": [
          "Destructuring/Destrukturisasi adalah cara yang mudah untuk mengekstraksi beberapa nilai dari variabel, objek dan Array yang tersimpan.",
          "Itu dapat digunakan di lokasi yang menerima data. Cara mengekstrak yang ditentukan melalui nilai pola"
        ],
        "summarize": "Singkatnya, destructuring itu adalah bagaimana kita menyusun nilai dari variabel, object maupun array, menjadi lebih terstruktur"
      },
      {
        "title": "Default parameters, Rest operator, Spread operator",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Iterators and functional programming in JS",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Modules",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Promises",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "ES6 exercise using TDD",
        "keywords": "",
        "notes": "",
        "summarize": ""
      }
    ]
  },
  {
    "id": 2,
    "title": "Thinking in React",
    "master": [
      {
        "title": "The Imperative to Declarative Shift",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Componentization",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "What is React made up of",
        "keywords": "",
        "notes": "",
        "summarize": "",
        "detail": [
          "Props & State",
          "Classes Vs. Functions",
          "One way data binding"
        ]
      },
      {
        "title": "Composition",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Virtual DOM and JSX",
        "keywords": [
          "Virtual DOM",
          "JSX"
        ],
        "notes": [
          "Virtual DOM adalah API pemrograman untuk dokumen HTML dan XML.", 
          "Ini mendefinisikan struktur logis dokumen dan cara dokumen diakses dan dimanipulasi.", 
          "DOM adalah singkatan dari Document Object Model.", 
          "Dan JSX merupakan sebuah sintaks extension pada javascript, untuk di gunakan pada React.", 
          "Sintaks kode JSX merupakan kode HTML yang di sematkan pada kode javascript.", 
          "JSX bukanlah sintaks javascript, sehingga browser tidak bisa membaca sintaks ini.", 
          "Dibutuhkan sebuah JSX compiler yang di gunakan untuk menerjemahkan JSX kedalam bahasa regular javascript agar bisa terbaca oleh browser."
        ],
        "summarize": "Singkatnya dengan virtual DOM kita ngebuat sebuah abstraksi DOM yang biasa disebut sebagai component. Component ini lah yang nanti nya di render ke dalam file HTML dengan JSX maka itu semua dapat terjadi",
        "usable_link": [
          {
            "url": "https://ekaprasasti.com/memulai-reactjs-dan-dasar-jsx/",
            "title": "ReactJSDOM&JSX"
          },
          {
            "url": "https://kudo.co.id/engineering/2017/02/16/mengenal-virtual-dom-pada-reactjs/",
            "title": "Conclusion Virtual DOM"
          }
        ],
        "detail": [
          "React Components, Elements, and Instances",
          "JSX and React.createElement"
        ]
      },
      {
        "title": "Developer tools",
        "keywords": "",
        "notes": "",
        "summarize": ""
      }
    ]
  },
  {
    "id": 3,
    "title": "Routing & Data Fetching",
    "master": [
      {
        "title": "React Router v4",
        "keywords": "",
        "notes": "",
        "summarize": "",
        "detail": [
          "Declarative routing",
          "Implementing a master-detail web application"
        ]
      },
      {
        "title": "Component lifecycle",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Data management",
        "keywords": "",
        "notes": "",
        "summarize": "",
        "detail": [
          "Presentational Components Vs. Container Components",
          "Data fetching"
        ]
      }
    ]
  },
  {
    "id": 4,
    "title": "Forms & Auth",
    "master": [
      {
        "title": "Forms management in React",
        "keywords": "",
        "notes": "",
        "summarize": "",
        "detail": [
          "Controlled Components",
          "Uncontrolled Components"
        ]
      },
      {
        "title": "Authentication",
        "keywords": "",
        "notes": "",
        "summarize": "",
        "detail": [
          "JWT",
          "Authorization, public and private pages"
        ]
      }
    ]
  },
  {
    "id": 5,
    "title": "Styling in React",
    "master": [
      {
        "title": "CSS Vs JS",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Styled-components",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Component libraries comparison: SemanticUI, MaterialUI, Rebass, and React-Bootstrap",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Storybook",
        "keywords": "",
        "notes": "",
        "summarize": ""
      }
    ]
  },
  {
    "id": 6,
    "title": "Introduction to Redux",
    "master": [
      {
        "title": "Introduction to functional programming",
        "keywords": "",
        "notes": "",
        "summarize": "",
        "detail": [
          "Data and behaviour",
          "Data in, data out",
          "Mutations",
          "Pure functions"
        ]
      },
      {
        "title": "Redux Principles",
        "keywords": "",
        "notes": "",
        "summarize": "",
        "detail": [
          "Store, Reducers, Actions",
          "Unique source of truth"
        ]
      },
      {
        "title": "React-Redux: Provider and Connect",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Build your own version of Redux using TDD",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Fetching data from the server to Redux",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Configure Redux from scratch in a React app",
        "keywords": "",
        "notes": "",
        "summarize": ""
      }
    ]
  },
  {
    "id": 7,
    "title": "Introduction to Testing in JS",
    "master": [
      {
        "title": "Build your own test framework in JavaScript",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Testing Redux using Jest",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "Mocking and testing API calls",
        "keywords": "",
        "notes": "",
        "summarize": ""
      },
      {
        "title": "White-box testing Vs. Black-box testing",
        "keywords": "",
        "notes": "",
        "summarize": ""
      }
    ]
  },
  {
    "id": 8,
    "title": "Advanced Pattern I",
    "master": [
      {
        "title": "Functional programming (FP)",
        "keywords": "",
        "notes": "",
        "summarize": "",
        "detail": [
          "Composing React components"
        ]
      },
      {
        "title": "Advanced React patterns to reuse functionality across components",
        "keywords": "",
        "notes": "",
        "summarize": "",
        "detail": [
          "Higher-Order Components (HOCs)",
          "Declarative composition using the Render Props (AKA function as children)"
        ]
      }
    ]
  }
]